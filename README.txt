Сборка:
В корневой директории проекта вызвать make

Запуск:
Исполняемый файл test_nlb находится в директории ./build
В качестве первого аргумента принимается путь до конфигурационного файла. Пример:
build/test_nlb config.ini

Описание работы:
Перенаправляет принятые сообщения на узлы, указанные в конфигурационном файле.
Имеет два интернет интерфейса - внешний(для принятия датаграмм клиентов) и
внутренний (для пересылки на узлы). Распределяет сообщения поочерёдно для 
каждого сервера (наподобиe алгоритму round-robin). Если не удалось переслать 
сообщение на очередной узел - алгоритм удаляет узел из списка. Балансировщик 
работает до тех пор, пока список не будет пуст или произойдёт ошибка чтения с 
внешнего интерфейса (принимающего датаграммы от клиентов).   

ЗАМЕТКА! В ходе тестирования выявлено, что даже если узел выключает свой 
интерфейс (тестовый сервер завершает работу), внутренний сокет балансировщика
успешно выполняет запись в сокет на указанный адрес, т.е. возвращает количество 
записанных байт. Куда уходят сообщения? Буферизируются в память или просто
поглощаются loopback интерфейсом? 

Для тестирования балансировщика созданы тестовый клиент и сервер. Находятся в
директории ./test. Для сборки, также вызвать make в корневой папке теста
отдельного узла. 

Тестовый клиент.
Со случайной частотой (от 1 до 100000 микросекунд) отправляет сообщения типа:
"Hello, I slept for N microseconds". Периодичность можно изменить, указав
нужное значение при инициализации переменной random_freq_msg{значение}.
Принимает три аргумента на вход:
	- IP адрес внешнего интерфейса балансировщика;
	- порт внешнего интерфейса балансировщика;
	- собственное время работы в секундах.
Собственные IP адрес и номер порта прибиты гвоздём в файле исходного кода 
(171.0.0.6 60006).

Тестовый сервер.
Просто выводит принятые сообщения. Внутренний буфер для чтения
датаграмм - 500 байт. 
Принимает три аргумента на вход:
	- собственный IP адрес;
	- собственный порт;
	- собственное время работы в секундах.
